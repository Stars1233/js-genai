/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import * as common from '../_common.js';
import * as t from '../_transformers.js';
import type * as types from '../types.js';

export function cancelTuningJobParametersToMldev(
  fromObject: types.CancelTuningJobParameters,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  return toObject;
}

export function cancelTuningJobParametersToVertex(
  fromObject: types.CancelTuningJobParameters,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  return toObject;
}

export function createTuningJobConfigToMldev(
  fromObject: types.CreateTuningJobConfig,
  parentObject: Record<string, unknown>,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['validationDataset']) !== undefined) {
    throw new Error(
      'validationDataset parameter is not supported in Gemini API.',
    );
  }

  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (parentObject !== undefined && fromTunedModelDisplayName != null) {
    common.setValueByPath(
      parentObject,
      ['displayName'],
      fromTunedModelDisplayName,
    );
  }

  if (common.getValueByPath(fromObject, ['description']) !== undefined) {
    throw new Error('description parameter is not supported in Gemini API.');
  }

  const fromEpochCount = common.getValueByPath(fromObject, ['epochCount']);
  if (parentObject !== undefined && fromEpochCount != null) {
    common.setValueByPath(
      parentObject,
      ['tuningTask', 'hyperparameters', 'epochCount'],
      fromEpochCount,
    );
  }

  const fromLearningRateMultiplier = common.getValueByPath(fromObject, [
    'learningRateMultiplier',
  ]);
  if (fromLearningRateMultiplier != null) {
    common.setValueByPath(
      toObject,
      ['tuningTask', 'hyperparameters', 'learningRateMultiplier'],
      fromLearningRateMultiplier,
    );
  }

  if (
    common.getValueByPath(fromObject, ['exportLastCheckpointOnly']) !==
    undefined
  ) {
    throw new Error(
      'exportLastCheckpointOnly parameter is not supported in Gemini API.',
    );
  }

  if (
    common.getValueByPath(fromObject, ['preTunedModelCheckpointId']) !==
    undefined
  ) {
    throw new Error(
      'preTunedModelCheckpointId parameter is not supported in Gemini API.',
    );
  }

  if (common.getValueByPath(fromObject, ['adapterSize']) !== undefined) {
    throw new Error('adapterSize parameter is not supported in Gemini API.');
  }

  const fromBatchSize = common.getValueByPath(fromObject, ['batchSize']);
  if (parentObject !== undefined && fromBatchSize != null) {
    common.setValueByPath(
      parentObject,
      ['tuningTask', 'hyperparameters', 'batchSize'],
      fromBatchSize,
    );
  }

  const fromLearningRate = common.getValueByPath(fromObject, ['learningRate']);
  if (parentObject !== undefined && fromLearningRate != null) {
    common.setValueByPath(
      parentObject,
      ['tuningTask', 'hyperparameters', 'learningRate'],
      fromLearningRate,
    );
  }

  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {
    throw new Error('labels parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['beta']) !== undefined) {
    throw new Error('beta parameter is not supported in Gemini API.');
  }

  return toObject;
}

export function createTuningJobConfigToVertex(
  fromObject: types.CreateTuningJobConfig,
  parentObject: Record<string, unknown>,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  let discriminatorValidationDataset = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorValidationDataset === undefined) {
    discriminatorValidationDataset = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorValidationDataset === 'SUPERVISED_FINE_TUNING') {
    const fromValidationDataset = common.getValueByPath(fromObject, [
      'validationDataset',
    ]);
    if (parentObject !== undefined && fromValidationDataset != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec'],
        tuningValidationDatasetToVertex(fromValidationDataset, rootObject),
      );
    }
  } else if (discriminatorValidationDataset === 'PREFERENCE_TUNING') {
    const fromValidationDataset = common.getValueByPath(fromObject, [
      'validationDataset',
    ]);
    if (parentObject !== undefined && fromValidationDataset != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec'],
        tuningValidationDatasetToVertex(fromValidationDataset, rootObject),
      );
    }
  }

  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (parentObject !== undefined && fromTunedModelDisplayName != null) {
    common.setValueByPath(
      parentObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (parentObject !== undefined && fromDescription != null) {
    common.setValueByPath(parentObject, ['description'], fromDescription);
  }

  let discriminatorEpochCount = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorEpochCount === undefined) {
    discriminatorEpochCount = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorEpochCount === 'SUPERVISED_FINE_TUNING') {
    const fromEpochCount = common.getValueByPath(fromObject, ['epochCount']);
    if (parentObject !== undefined && fromEpochCount != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'hyperParameters', 'epochCount'],
        fromEpochCount,
      );
    }
  } else if (discriminatorEpochCount === 'PREFERENCE_TUNING') {
    const fromEpochCount = common.getValueByPath(fromObject, ['epochCount']);
    if (parentObject !== undefined && fromEpochCount != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec', 'hyperParameters', 'epochCount'],
        fromEpochCount,
      );
    }
  }

  let discriminatorLearningRateMultiplier = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorLearningRateMultiplier === undefined) {
    discriminatorLearningRateMultiplier = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorLearningRateMultiplier === 'SUPERVISED_FINE_TUNING') {
    const fromLearningRateMultiplier = common.getValueByPath(fromObject, [
      'learningRateMultiplier',
    ]);
    if (parentObject !== undefined && fromLearningRateMultiplier != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'hyperParameters', 'learningRateMultiplier'],
        fromLearningRateMultiplier,
      );
    }
  } else if (discriminatorLearningRateMultiplier === 'PREFERENCE_TUNING') {
    const fromLearningRateMultiplier = common.getValueByPath(fromObject, [
      'learningRateMultiplier',
    ]);
    if (parentObject !== undefined && fromLearningRateMultiplier != null) {
      common.setValueByPath(
        parentObject,
        [
          'preferenceOptimizationSpec',
          'hyperParameters',
          'learningRateMultiplier',
        ],
        fromLearningRateMultiplier,
      );
    }
  }

  let discriminatorExportLastCheckpointOnly = common.getValueByPath(
    rootObject,
    ['config', 'method'],
  );
  if (discriminatorExportLastCheckpointOnly === undefined) {
    discriminatorExportLastCheckpointOnly = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorExportLastCheckpointOnly === 'SUPERVISED_FINE_TUNING') {
    const fromExportLastCheckpointOnly = common.getValueByPath(fromObject, [
      'exportLastCheckpointOnly',
    ]);
    if (parentObject !== undefined && fromExportLastCheckpointOnly != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'exportLastCheckpointOnly'],
        fromExportLastCheckpointOnly,
      );
    }
  } else if (discriminatorExportLastCheckpointOnly === 'PREFERENCE_TUNING') {
    const fromExportLastCheckpointOnly = common.getValueByPath(fromObject, [
      'exportLastCheckpointOnly',
    ]);
    if (parentObject !== undefined && fromExportLastCheckpointOnly != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec', 'exportLastCheckpointOnly'],
        fromExportLastCheckpointOnly,
      );
    }
  }

  let discriminatorAdapterSize = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorAdapterSize === undefined) {
    discriminatorAdapterSize = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorAdapterSize === 'SUPERVISED_FINE_TUNING') {
    const fromAdapterSize = common.getValueByPath(fromObject, ['adapterSize']);
    if (parentObject !== undefined && fromAdapterSize != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'hyperParameters', 'adapterSize'],
        fromAdapterSize,
      );
    }
  } else if (discriminatorAdapterSize === 'PREFERENCE_TUNING') {
    const fromAdapterSize = common.getValueByPath(fromObject, ['adapterSize']);
    if (parentObject !== undefined && fromAdapterSize != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec', 'hyperParameters', 'adapterSize'],
        fromAdapterSize,
      );
    }
  }
  if (common.getValueByPath(fromObject, ['batchSize']) !== undefined) {
    throw new Error('batchSize parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['learningRate']) !== undefined) {
    throw new Error('learningRate parameter is not supported in Vertex AI.');
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (parentObject !== undefined && fromLabels != null) {
    common.setValueByPath(parentObject, ['labels'], fromLabels);
  }

  const fromBeta = common.getValueByPath(fromObject, ['beta']);
  if (parentObject !== undefined && fromBeta != null) {
    common.setValueByPath(
      parentObject,
      ['preferenceOptimizationSpec', 'hyperParameters', 'beta'],
      fromBeta,
    );
  }

  return toObject;
}

export function createTuningJobParametersPrivateToMldev(
  fromObject: types.CreateTuningJobParametersPrivate,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromPreTunedModel = common.getValueByPath(fromObject, [
    'preTunedModel',
  ]);
  if (fromPreTunedModel != null) {
    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);
  }

  const fromTrainingDataset = common.getValueByPath(fromObject, [
    'trainingDataset',
  ]);
  if (fromTrainingDataset != null) {
    tuningDatasetToMldev(fromTrainingDataset, rootObject);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    createTuningJobConfigToMldev(fromConfig, toObject, rootObject);
  }

  return toObject;
}

export function createTuningJobParametersPrivateToVertex(
  fromObject: types.CreateTuningJobParametersPrivate,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromPreTunedModel = common.getValueByPath(fromObject, [
    'preTunedModel',
  ]);
  if (fromPreTunedModel != null) {
    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);
  }

  const fromTrainingDataset = common.getValueByPath(fromObject, [
    'trainingDataset',
  ]);
  if (fromTrainingDataset != null) {
    tuningDatasetToVertex(fromTrainingDataset, toObject, rootObject);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    createTuningJobConfigToVertex(fromConfig, toObject, rootObject);
  }

  return toObject;
}

export function getTuningJobParametersToMldev(
  fromObject: types.GetTuningJobParameters,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  return toObject;
}

export function getTuningJobParametersToVertex(
  fromObject: types.GetTuningJobParameters,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  return toObject;
}

export function listTuningJobsConfigToMldev(
  fromObject: types.ListTuningJobsConfig,
  parentObject: Record<string, unknown>,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (parentObject !== undefined && fromPageSize != null) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (parentObject !== undefined && fromPageToken != null) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  const fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (parentObject !== undefined && fromFilter != null) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

export function listTuningJobsConfigToVertex(
  fromObject: types.ListTuningJobsConfig,
  parentObject: Record<string, unknown>,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (parentObject !== undefined && fromPageSize != null) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (parentObject !== undefined && fromPageToken != null) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  const fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (parentObject !== undefined && fromFilter != null) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

export function listTuningJobsParametersToMldev(
  fromObject: types.ListTuningJobsParameters,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    listTuningJobsConfigToMldev(fromConfig, toObject, rootObject);
  }

  return toObject;
}

export function listTuningJobsParametersToVertex(
  fromObject: types.ListTuningJobsParameters,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    listTuningJobsConfigToVertex(fromConfig, toObject, rootObject);
  }

  return toObject;
}

export function listTuningJobsResponseFromMldev(
  fromObject: types.ListTuningJobsResponse,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSdkHttpResponse = common.getValueByPath(fromObject, [
    'sdkHttpResponse',
  ]);
  if (fromSdkHttpResponse != null) {
    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);
  }

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken != null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromTuningJobs = common.getValueByPath(fromObject, ['tunedModels']);
  if (fromTuningJobs != null) {
    let transformedList = fromTuningJobs;
    if (Array.isArray(transformedList)) {
      transformedList = transformedList.map((item) => {
        return tuningJobFromMldev(item, rootObject);
      });
    }
    common.setValueByPath(toObject, ['tuningJobs'], transformedList);
  }

  return toObject;
}

export function listTuningJobsResponseFromVertex(
  fromObject: types.ListTuningJobsResponse,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSdkHttpResponse = common.getValueByPath(fromObject, [
    'sdkHttpResponse',
  ]);
  if (fromSdkHttpResponse != null) {
    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);
  }

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken != null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromTuningJobs = common.getValueByPath(fromObject, ['tuningJobs']);
  if (fromTuningJobs != null) {
    let transformedList = fromTuningJobs;
    if (Array.isArray(transformedList)) {
      transformedList = transformedList.map((item) => {
        return tuningJobFromVertex(item, rootObject);
      });
    }
    common.setValueByPath(toObject, ['tuningJobs'], transformedList);
  }

  return toObject;
}

export function tunedModelFromMldev(
  fromObject: types.TunedModel,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['name']);
  if (fromModel != null) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromEndpoint = common.getValueByPath(fromObject, ['name']);
  if (fromEndpoint != null) {
    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);
  }

  return toObject;
}

export function tuningDatasetToMldev(
  fromObject: types.TuningDataset,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['gcsUri']) !== undefined) {
    throw new Error('gcsUri parameter is not supported in Gemini API.');
  }

  if (
    common.getValueByPath(fromObject, ['vertexDatasetResource']) !== undefined
  ) {
    throw new Error(
      'vertexDatasetResource parameter is not supported in Gemini API.',
    );
  }

  const fromExamples = common.getValueByPath(fromObject, ['examples']);
  if (fromExamples != null) {
    let transformedList = fromExamples;
    if (Array.isArray(transformedList)) {
      transformedList = transformedList.map((item) => {
        return item;
      });
    }
    common.setValueByPath(toObject, ['examples', 'examples'], transformedList);
  }

  return toObject;
}

export function tuningDatasetToVertex(
  fromObject: types.TuningDataset,
  parentObject: Record<string, unknown>,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  let discriminatorGcsUri = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorGcsUri === undefined) {
    discriminatorGcsUri = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorGcsUri === 'SUPERVISED_FINE_TUNING') {
    const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
    if (parentObject !== undefined && fromGcsUri != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'trainingDatasetUri'],
        fromGcsUri,
      );
    }
  } else if (discriminatorGcsUri === 'PREFERENCE_TUNING') {
    const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
    if (parentObject !== undefined && fromGcsUri != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec', 'trainingDatasetUri'],
        fromGcsUri,
      );
    }
  }

  let discriminatorVertexDatasetResource = common.getValueByPath(rootObject, [
    'config',
    'method',
  ]);
  if (discriminatorVertexDatasetResource === undefined) {
    discriminatorVertexDatasetResource = 'SUPERVISED_FINE_TUNING';
  }
  if (discriminatorVertexDatasetResource === 'SUPERVISED_FINE_TUNING') {
    const fromVertexDatasetResource = common.getValueByPath(fromObject, [
      'vertexDatasetResource',
    ]);
    if (parentObject !== undefined && fromVertexDatasetResource != null) {
      common.setValueByPath(
        parentObject,
        ['supervisedTuningSpec', 'trainingDatasetUri'],
        fromVertexDatasetResource,
      );
    }
  } else if (discriminatorVertexDatasetResource === 'PREFERENCE_TUNING') {
    const fromVertexDatasetResource = common.getValueByPath(fromObject, [
      'vertexDatasetResource',
    ]);
    if (parentObject !== undefined && fromVertexDatasetResource != null) {
      common.setValueByPath(
        parentObject,
        ['preferenceOptimizationSpec', 'trainingDatasetUri'],
        fromVertexDatasetResource,
      );
    }
  }
  if (common.getValueByPath(fromObject, ['examples']) !== undefined) {
    throw new Error('examples parameter is not supported in Vertex AI.');
  }

  return toObject;
}

export function tuningJobFromMldev(
  fromObject: types.TuningJob,
  rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSdkHttpResponse = common.getValueByPath(fromObject, [
    'sdkHttpResponse',
  ]);
  if (fromSdkHttpResponse != null) {
    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState != null) {
    common.setValueByPath(toObject, ['state'], t.tTuningJobStatus(fromState));
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime != null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromStartTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'startTime',
  ]);
  if (fromStartTime != null) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  const fromEndTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'completeTime',
  ]);
  if (fromEndTime != null) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime != null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromTunedModel = common.getValueByPath(fromObject, ['_self']);
  if (fromTunedModel != null) {
    common.setValueByPath(
      toObject,
      ['tunedModel'],
      tunedModelFromMldev(fromTunedModel, rootObject),
    );
  }

  return toObject;
}

export function tuningJobFromVertex(
  fromObject: types.TuningJob,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSdkHttpResponse = common.getValueByPath(fromObject, [
    'sdkHttpResponse',
  ]);
  if (fromSdkHttpResponse != null) {
    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState != null) {
    common.setValueByPath(toObject, ['state'], t.tTuningJobStatus(fromState));
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime != null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromStartTime = common.getValueByPath(fromObject, ['startTime']);
  if (fromStartTime != null) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  const fromEndTime = common.getValueByPath(fromObject, ['endTime']);
  if (fromEndTime != null) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime != null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError != null) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromTunedModel = common.getValueByPath(fromObject, ['tunedModel']);
  if (fromTunedModel != null) {
    common.setValueByPath(toObject, ['tunedModel'], fromTunedModel);
  }

  const fromPreTunedModel = common.getValueByPath(fromObject, [
    'preTunedModel',
  ]);
  if (fromPreTunedModel != null) {
    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);
  }

  const fromSupervisedTuningSpec = common.getValueByPath(fromObject, [
    'supervisedTuningSpec',
  ]);
  if (fromSupervisedTuningSpec != null) {
    common.setValueByPath(
      toObject,
      ['supervisedTuningSpec'],
      fromSupervisedTuningSpec,
    );
  }

  const fromPreferenceOptimizationSpec = common.getValueByPath(fromObject, [
    'preferenceOptimizationSpec',
  ]);
  if (fromPreferenceOptimizationSpec != null) {
    common.setValueByPath(
      toObject,
      ['preferenceOptimizationSpec'],
      fromPreferenceOptimizationSpec,
    );
  }

  const fromTuningDataStats = common.getValueByPath(fromObject, [
    'tuningDataStats',
  ]);
  if (fromTuningDataStats != null) {
    common.setValueByPath(toObject, ['tuningDataStats'], fromTuningDataStats);
  }

  const fromEncryptionSpec = common.getValueByPath(fromObject, [
    'encryptionSpec',
  ]);
  if (fromEncryptionSpec != null) {
    common.setValueByPath(toObject, ['encryptionSpec'], fromEncryptionSpec);
  }

  const fromPartnerModelTuningSpec = common.getValueByPath(fromObject, [
    'partnerModelTuningSpec',
  ]);
  if (fromPartnerModelTuningSpec != null) {
    common.setValueByPath(
      toObject,
      ['partnerModelTuningSpec'],
      fromPartnerModelTuningSpec,
    );
  }

  const fromCustomBaseModel = common.getValueByPath(fromObject, [
    'customBaseModel',
  ]);
  if (fromCustomBaseModel != null) {
    common.setValueByPath(toObject, ['customBaseModel'], fromCustomBaseModel);
  }

  const fromExperiment = common.getValueByPath(fromObject, ['experiment']);
  if (fromExperiment != null) {
    common.setValueByPath(toObject, ['experiment'], fromExperiment);
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels != null) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  const fromOutputUri = common.getValueByPath(fromObject, ['outputUri']);
  if (fromOutputUri != null) {
    common.setValueByPath(toObject, ['outputUri'], fromOutputUri);
  }

  const fromPipelineJob = common.getValueByPath(fromObject, ['pipelineJob']);
  if (fromPipelineJob != null) {
    common.setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);
  }

  const fromServiceAccount = common.getValueByPath(fromObject, [
    'serviceAccount',
  ]);
  if (fromServiceAccount != null) {
    common.setValueByPath(toObject, ['serviceAccount'], fromServiceAccount);
  }

  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (fromTunedModelDisplayName != null) {
    common.setValueByPath(
      toObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  const fromVeoTuningSpec = common.getValueByPath(fromObject, [
    'veoTuningSpec',
  ]);
  if (fromVeoTuningSpec != null) {
    common.setValueByPath(toObject, ['veoTuningSpec'], fromVeoTuningSpec);
  }

  return toObject;
}

export function tuningOperationFromMldev(
  fromObject: types.TuningOperation,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSdkHttpResponse = common.getValueByPath(fromObject, [
    'sdkHttpResponse',
  ]);
  if (fromSdkHttpResponse != null) {
    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata != null) {
    common.setValueByPath(toObject, ['metadata'], fromMetadata);
  }

  const fromDone = common.getValueByPath(fromObject, ['done']);
  if (fromDone != null) {
    common.setValueByPath(toObject, ['done'], fromDone);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError != null) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  return toObject;
}

export function tuningValidationDatasetToVertex(
  fromObject: types.TuningValidationDataset,
  _rootObject?: unknown,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
  if (fromGcsUri != null) {
    common.setValueByPath(toObject, ['validationDatasetUri'], fromGcsUri);
  }

  const fromVertexDatasetResource = common.getValueByPath(fromObject, [
    'vertexDatasetResource',
  ]);
  if (fromVertexDatasetResource != null) {
    common.setValueByPath(
      toObject,
      ['validationDatasetUri'],
      fromVertexDatasetResource,
    );
  }

  return toObject;
}
